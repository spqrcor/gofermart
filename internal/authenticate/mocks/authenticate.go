// Code generated by MockGen. DO NOT EDIT.
// Source: internal/authenticate/authenticate.go

// Package amocks is a generated GoMock package.
package amocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GetUserIDFromCookie mocks base method.
func (m *MockAuth) GetUserIDFromCookie(tokenString string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromCookie", tokenString)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromCookie indicates an expected call of GetUserIDFromCookie.
func (mr *MockAuthMockRecorder) GetUserIDFromCookie(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromCookie", reflect.TypeOf((*MockAuth)(nil).GetUserIDFromCookie), tokenString)
}

// SetCookie mocks base method.
func (m *MockAuth) SetCookie(rw http.ResponseWriter, UserID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCookie", rw, UserID)
}

// SetCookie indicates an expected call of SetCookie.
func (mr *MockAuthMockRecorder) SetCookie(rw, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockAuth)(nil).SetCookie), rw, UserID)
}
