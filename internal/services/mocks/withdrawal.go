// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/withdrawal.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/spqrcor/gofermart/internal/services"
)

// MockWithdrawal is a mock of Withdrawal interface.
type MockWithdrawal struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalMockRecorder
}

// MockWithdrawalMockRecorder is the mock recorder for MockWithdrawal.
type MockWithdrawalMockRecorder struct {
	mock *MockWithdrawal
}

// NewMockWithdrawal creates a new mock instance.
func NewMockWithdrawal(ctrl *gomock.Controller) *MockWithdrawal {
	mock := &MockWithdrawal{ctrl: ctrl}
	mock.recorder = &MockWithdrawalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawal) EXPECT() *MockWithdrawalMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWithdrawal) Add(ctx context.Context, input services.InputWithdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockWithdrawalMockRecorder) Add(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWithdrawal)(nil).Add), ctx, input)
}

// GetAll mocks base method.
func (m *MockWithdrawal) GetAll(ctx context.Context) ([]services.WithdrawalData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]services.WithdrawalData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWithdrawalMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWithdrawal)(nil).GetAll), ctx)
}

// GetBalance mocks base method.
func (m *MockWithdrawal) GetBalance(ctx context.Context) (services.BalanceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx)
	ret0, _ := ret[0].(services.BalanceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWithdrawalMockRecorder) GetBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWithdrawal)(nil).GetBalance), ctx)
}
